<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[RocXing' BLOG]]></title>
  
  <link href="/blog/public/atom.xml" rel="self"/>
  <link href="http://rocxing.github.io/blog/public/"/>
  <updated>2015-08-24T08:08:26.873Z</updated>
  <id>http://rocxing.github.io/blog/public/</id>
  
  <author>
    <name><![CDATA[RocXing]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Python缩进tips]]></title>
    <link href="http://rocxing.github.io/blog/public/2015/08/24/Python%E7%BC%A9%E8%BF%9Btips/"/>
    <id>http://rocxing.github.io/blog/public/2015/08/24/Python缩进tips/</id>
    <published>2015-08-24T07:28:08.000Z</published>
    <updated>2015-08-24T08:08:26.873Z</updated>
    <content type="html"><![CDATA[<p>Python有着严格的代码缩进，这使得整个语言具有更高的可读性，代码看起来更加优美，赏心悦目。<br>但这种缩进控制的嵌套语言有一些小“坑”需要注意。</p>
<p>下面是一段tab制表符和空格缩进混用的例子：</p>
<img src="/blog/public/2015/08/24/Python缩进tips/code.png" alt="[代码]" title="[代码]">
<p>这段代码的意思很简单，理论上是没有输出结果的，因为1和2的打印输出都在if判断中，而其条件为False不会执行。然而执行这段代码的结果是输出了2！</p>
<p>我们可以注意到，<code>print &#39;1&#39;</code>前面为2个<strong>tab制表符</strong>的缩进，而<code>print &#39;2&#39;</code>前面为8个<strong>空格</strong>的缩进。对于python解释器，它认为8个空格才是一个缩进而非我们约定俗成的4个，因此<code>print &#39;2&#39;</code>前面相当于只有一个tab制表符，最终输出了2。</p>
<p>为了避免这种代码缩进导致的逻辑错误，推荐使用Pycharm IDE，其具有PEP8代码规范的警告提示，并将tab自动替换为4个空格，从而避免了tab制表符和空格缩进的混用问题。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Python有着严格的代码缩进，这使得整个语言具有更高的可读性，代码看起来更加优美，赏心悦目。<br>但这种缩进控制的嵌套语言有一些小“坑”需要注意。</p>
<p>下面是一段tab制表符和空格缩进混用的例子：</p>
<img src="/blog/public/2015]]>
    </summary>
    
      <category term="Python" scheme="http://rocxing.github.io/blog/public/tags/Python/"/>
    
      <category term="Python" scheme="http://rocxing.github.io/blog/public/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git ^和~]]></title>
    <link href="http://rocxing.github.io/blog/public/2015/08/20/git%E5%BC%95%E7%94%A8%E7%88%B6%E8%8A%82%E7%82%B9/"/>
    <id>http://rocxing.github.io/blog/public/2015/08/20/git引用父节点/</id>
    <published>2015-08-20T04:30:11.000Z</published>
    <updated>2015-08-20T04:43:34.568Z</updated>
    <content type="html"><![CDATA[<p>有时候为了方便，我们经常使用~与^的运算符号来引用git的某一次提交。git仓库中的每一次提交都是一个节点，形成了一颗树状结构。因此，我们只需要指明第几个前驱节点，就可以轻松的引用前驱节点的提交。有了^和~，我们就不用每次都使用冗长的提交哈希值了。  </p>
<p>如：</p>
<p><code>$ git revert HEAD~1</code></p>
<p><code>$ git checkout HEAD^^2</code></p>
<h3 id="^和~总结如下：">^和~总结如下：</h3><ol>
<li><p>“^”代表父提交，当一个提交有多个父提交时，可以通过在“^”后面跟上一个数字，表示第几个父提交，“^”相当于是“^1”的省略。</p>
</li>
<li><p>“~<n>”相当于连续的n个“^”。</n></p>
</li>
<li><p>checkout只会移动HEAD指针，reset会改变HEAD的引用值。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>有时候为了方便，我们经常使用~与^的运算符号来引用git的某一次提交。git仓库中的每一次提交都是一个节点，形成了一颗树状结构。因此，我们只需要指明第几个前驱节点，就可以轻松的引用前驱节点的提交。有了^和~，我们就不用每次都使用冗长的提交哈希值了。  </p>
<p>如：<]]>
    </summary>
    
      <category term="git" scheme="http://rocxing.github.io/blog/public/tags/git/"/>
    
      <category term="git" scheme="http://rocxing.github.io/blog/public/categories/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的博客上线啦]]></title>
    <link href="http://rocxing.github.io/blog/public/2015/08/18/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%8A%E7%BA%BF%E5%95%A6/"/>
    <id>http://rocxing.github.io/blog/public/2015/08/18/我的博客上线啦/</id>
    <published>2015-08-18T07:59:11.000Z</published>
    <updated>2015-08-18T08:17:53.840Z</updated>
    <content type="html"><![CDATA[<h2 id="2015-8-18，我的博客终于上线了">2015.8.18，我的博客终于上线了</h2><p>不过还不大习惯Markdown的语法=.=<br>接下来熟悉一下语法应该就可以写文章了<br>总之先放到github上去。。。。  </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="2015-8-18，我的博客终于上线了">2015.8.18，我的博客终于上线了</h2><p>不过还不大习惯Markdown的语法=.=<br>接下来熟悉一下语法应该就可以写文章了<br>总之先放到github上去。。。。  </p>
]]>
    </summary>
    
      <category term="博客" scheme="http://rocxing.github.io/blog/public/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="New" scheme="http://rocxing.github.io/blog/public/categories/New/"/>
    
  </entry>
  
</feed>
